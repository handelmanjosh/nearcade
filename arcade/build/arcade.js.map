{"version":3,"file":"arcade.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../src/utils.ts","../src/arcade.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, encode, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageReadRaw(encode(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWriteRaw(encode(storageKey), storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, str, bytes, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = str(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageReadRaw(bytes(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemoveRaw(bytes(lastKey)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemoveRaw(bytes(key));\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, encode, decode, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this._keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this._keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this._keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this._keys.push(key);\n            this.values.set(key, [decode(serialized), newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [decode(serialized), oldIndex]);\n        return getValueWithOptions(encode(oldValue), options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this._keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this._keys.isEmpty() && index !== this._keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this._keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this._keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this._keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map._keys = new Vector(`${data.prefix}u`);\n        map._keys.length = data._keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n    keys({ start, limit }) {\n        const ret = [];\n        if (start === undefined) {\n            start = 0;\n        }\n        if (limit == undefined) {\n            limit = this.length - start;\n        }\n        for (let i = start; i < start + limit; i++) {\n            ret.push(this._keys.get(i));\n        }\n        return ret;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap._keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [\n                key.value,\n                getValueWithOptions(encode(valueAndIndex[0]), this.options),\n            ],\n        };\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import { AccountId, LookupMap, UnorderedMap, Vector } from \"near-sdk-js\";\n\nexport function generateRandomUUID(): string {\n    const chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let result = \"\";\n    for (let i = 32; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\nexport class Play {\n    player: AccountId;\n    gameId: string;\n    constructor({player, gameId}: {player: AccountId, gameId: string}) {\n      this.player = player;\n      this.gameId = gameId;\n    }\n}\nexport class Stat {\n    player_id: string;\n    game_id: string\n    score: number;\n    challengeData: {name: string, value: number}[]\n    constructor({ player_id, game_id }: {player_id: string, game_id: string}) {\n      this.player_id = player_id\n      this.score = 0;\n      this.game_id = game_id\n      this.challengeData = [];\n    }\n}\nexport class Game {\n    admin: AccountId\n    url: string;\n    img_url: string\n    name: string;\n    description: string;\n    challenges: GameChallengeMetadata[]\n    leaderboardRewards: number[];\n    challengeRewards: number[]\n    cost_to_play: number;\n    shop: {name: string, description: string, price: number, type: string, img_src: string}[]\n    constructor({admin, url, name, challenges, description, img_url, cost_to_play, leaderboardRewards, challengeRewards}: {cost_to_play: number, admin: AccountId, url: string, name: string, description: string, challenges: GameChallengeMetadata[], img_url: string, leaderboardRewards: number[], challengeRewards: number[]}) {\n      this.url = url;\n      this.name = name;\n      this.challenges = challenges;\n      this.admin = admin;\n      this.description = description;\n      this.img_url = img_url;\n      this.cost_to_play = cost_to_play;\n      this.leaderboardRewards = leaderboardRewards\n      this.challengeRewards = challengeRewards\n      this.shop = [];\n    }\n  }\nexport class GameChallengeMetadata {\n    name: string;\n    description: string;\n    value: number;\n    thresholds: number[];\n    constructor(metadata: {name: string, description: string, thresholds: number[]}) {\n      this.name = metadata.name;\n      this.description = metadata.description;\n      this.value = 0;\n      this.thresholds = metadata.thresholds;\n    }\n  }\n\n  export class Listing {\n    id: string\n    seller: string\n    price: number\n    contract_id: string\n    type: string\n    img_src: string\n    constructor({id, seller, price, type, contract_id, img_src}: {id: string, seller: string, price: number, type: string, contract_id: string, img_src: string}) {\n        this.id = id;\n        this.seller = seller;\n        this.price = price;\n        this.type = type\n        this.contract_id = contract_id\n        this.img_src = img_src\n    }\n}","// Find all our documentation at https://docs.near.org\nimport { NearBindgen, near, call, view, LookupMap, UnorderedMap, assert, UnorderedSet, Vector, AccountId, NearPromise, initialize, ONE_YOCTO, ONE_NEAR } from 'near-sdk-js';\nimport { Game, GameChallengeMetadata, Listing, Play, Stat, generateRandomUUID } from './utils';\n\n\nclass PhysicalPrize {\n  id: string;\n  tracking_num: string;\n  player_id: string;\n  ticket_reward: number\n  constructor({id, tracking_num, player_id, ticket_reward}: {id: string, tracking_num: string, player_id: string, ticket_reward: number}) {\n    this.id = id;\n    this.tracking_num = tracking_num;\n    this.player_id = player_id;\n    this.ticket_reward = ticket_reward\n  }\n}\n\n@NearBindgen({})\nclass Arcade {\n  games: UnorderedMap<Game>\n  plays: LookupMap<Play>\n  ticketBalances: LookupMap<number>    \n  listings: UnorderedMap<Listing>\n  playerStats: UnorderedMap<Stat[]>\n  ticketLeaderboard: UnorderedMap<number>\n  physicalPrizes: UnorderedMap<PhysicalPrize>\n  constructor() {\n    this.games = new UnorderedMap<Game>(\"games\");\n    this.plays = new LookupMap<Play>(\"plays\");\n    this.ticketBalances = new LookupMap<number>(\"ticket_balances\");\n    this.listings = new UnorderedMap<Listing>(\"listings\");\n    this.playerStats = new UnorderedMap<Stat[]>(\"player_stats\");\n    this.ticketLeaderboard = new UnorderedMap<number>(\"ticket_leaderboard\");\n    this.physicalPrizes = new UnorderedMap<PhysicalPrize>(\"physical_prizes\");\n  }\n  @initialize({})\n  init() {\n    this.ticketBalances.set(\"ARCADE\", 1000000000000000)\n  }\n  @call({})\n  takeDownListing({ id } : { id: string }) {\n    assert(this.listings.get(id), \"Listing does not exist\");\n    this.listings.remove(id);\n  }\n  @call({})\n  claimPhysicalPrizeTicketReward({ id }: {id: string}) {\n    const prize = this.physicalPrizes.get(id);\n    assert(prize, \"Prize does not exist\");\n    assert(prize.player_id === near.predecessorAccountId(), \"You do not own this prize\");\n    // check to see if prize has been delivered\n    // if so, then give player the ticket reward\n    this.ticketBalances.set(near.predecessorAccountId(), (this.ticketBalances.get(near.predecessorAccountId()) || 0) + prize.ticket_reward);\n  }\n  @call({})\n  updatePhysicalPrizeTrackingInfo({tracking_num, id}: {tracking_num: string, id: string}) {\n    const prize = this.physicalPrizes.get(id);\n    assert(prize, \"Prize does not exist\");\n    assert(prize.player_id === near.predecessorAccountId(), \"You do not own this prize\");\n    prize.tracking_num = tracking_num;\n    this.physicalPrizes.set(id, prize);\n  }\n  @call({})\n  createListing({ id, price, type, contract_id, img_src }: { id: string, price: number, type: string, contract_id: string, img_src: string }) {\n      assert(!this.listings.get(id), \"Listing already exists\");\n      const listing = new Listing({ id, seller: near.predecessorAccountId(), price, type, contract_id, img_src });\n      this.listings.set(id, listing);\n      // const promise = near.promiseBatchCreate(contract_id);\n      // if (type === \"nft\") {\n      //     near.promiseBatchActionFunctionCall(\n      //         promise,\n      //         \"nft_transfer\",\n      //         JSON.stringify({\n      //             receiver_id: contract_id,\n      //             token_id: id,\n      //             approval_id: null,\n      //             memo: null\n      //         }),\n      //         1,\n      //         GAS_FOR_NFT_TRANSFER\n      //     )\n      // } else if (type === \"coin\") {\n      //     near.promiseBatchActionFunctionCall(\n      //         promise,\n      //         \"ft_transfer\",\n      //         JSON.stringify({\n      //             receiver_id: \"xeony.testnet\",\n      //             amount: price,\n      //             memo: null\n      //         }),\n      //         1,\n      //         GAS_FOR_NFT_TRANSFER\n      //     )\n      // }\n  }\n  @call({})\n  buyListing({ id }) {\n    const listing = this.listings.get(id);\n    assert(listing, \"Listing does not exist\");\n    const buyerTickets = this.ticketBalances.get(near.predecessorAccountId()) || 0;\n    if (buyerTickets >= BigInt(listing.price)) {\n      if (listing.type === \"physical\") {\n        const physicalPrize = new PhysicalPrize({id, tracking_num: \"\", player_id: listing.seller, ticket_reward: listing.price});\n        this.physicalPrizes.set(id, physicalPrize);\n      } else {\n        this.ticketBalances.set(listing.seller, (this.ticketBalances.get(listing.seller) || 0 + listing.price));\n      }\n      this.ticketBalances.set(near.predecessorAccountId(), buyerTickets - listing.price);\n      this.listings.remove(id);\n    }\n  }\n  @view({})\n  getListings() {\n    return this.listings.toArray().map(data => data[1]);\n  }\n  @view({})\n  getMyListings({ account_id }: { account_id: string }) {\n    return this.listings.toArray().filter(data => data[1].seller === account_id).map(data => data[1])\n  }\n  @call({})\n  buyFromGameShop({game_id, name}: {game_id: string, name: string}) {\n    const game = this.games.get(game_id);\n    assert(game, \"Game does not exist\");\n    const listing = game.shop.find(listing => listing.name === name);\n    assert(listing, \"Listing does not exist\");\n    const buyerTickets = this.ticketBalances.get(near.predecessorAccountId()) || 0;\n    assert(buyerTickets >= listing.price, \"Not enough tickets to buy this item\");\n    this.ticketBalances.set(near.predecessorAccountId(), buyerTickets - listing.price);\n    this.ticketBalances.set(game.admin, (this.ticketBalances.get(game.admin) || 0) + listing.price);\n\n    // todo: send item to player\n\n  }\n  @call({})\n  addToGameShop({game_id, name, description, price, type, img_src}: {game_id: string, name: string, price: number, description: string, type: string, img_src: string}) {\n    const game = this.games.get(game_id);\n    assert(game, \"Game does not exist\");\n    assert(game.admin === near.predecessorAccountId(), \"You are not the admin of this game\"); \n    // todo: take iten fron uploader\n    const listing = {name, description, price, type, img_src};\n    game.shop.push(listing);\n    this.games.set(game_id, game);\n  }\n  @call({})\n  removeFromGameShop({game_id, name}: {game_id: string, name: string}) {\n    const game = this.games.get(game_id);\n    assert(game, \"Game does not exist\");\n    assert(game.admin === near.predecessorAccountId(), \"You are not the admin of this game\");\n    game.shop = game.shop.filter(listing => listing.name !== name);\n    this.games.set(game_id, game);\n  }\n  @view({})\n  getGameShop({game_id}: {game_id: string}) {\n    const game = this.games.get(game_id);\n    assert(game, \"Game does not exist\");\n    return game.shop;\n  }\n  @call({})\n  createGame({\n    url,\n    name,\n    description,\n    challenges,\n    cost_to_play,\n    img_url,\n    leaderboardRewards,\n    challengeRewards\n  }: {\n    url: string,\n    name: string,\n    description: string,\n    challenges: {name: string, description: string, value: number, thresholds: number[]}[],\n    cost_to_play: number,\n    img_url: string,\n    leaderboardRewards: number[],\n    challengeRewards: number[]\n  }) {\n    // get user to pay for storage\n    assert(!this.games.toArray().map(data => data[0]).includes(name), \"Game already exists\")\n   // NearPromise.new(\"xeony.testnet\").transfer(BigInt(1) * ONE_NEAR)\n    let challengeMap = challenges.map(challenge => new GameChallengeMetadata(challenge));\n    const game = new Game({admin: near.predecessorAccountId(), url, name, description, challenges: challengeMap, img_url, cost_to_play, leaderboardRewards, challengeRewards});\n    this.games.set(name, game);\n  }\n  @call({})\n  fundGame({name, amount}:{name: string, amount: number}) {\n    // transfer some near out of the callers account to the contract\n   // NearPromise.new(\"xeony.testnet\").transfer(BigInt(amount) * ONE_NEAR)\n    const game = this.games.get(name);\n    assert(game, \"Game does not exist\")\n    const currentGameBalance = this.ticketBalances.get(name) || 0;\n    this.ticketBalances.set(name, currentGameBalance + amount * 1000);\n    this.ticketBalances.set(\"ARCADE\", this.ticketBalances.get(\"ARCADE\") - amount * 1000);\n  }\n  @call({})\n  playGame({ gameId }: { gameId: string }) {\n    const playerId = near.predecessorAccountId();\n    const game = this.games.get(gameId);\n    assert(game, \"Game does not exist\")\n    // game.cost_to_play near withdrawn from player account and sent to game admin\n    const play = new Play({player: playerId, gameId});\n    // need to get player account\n    // need to assert player called the playgame function\n    this.plays.set(`${gameId}-${playerId}`, play);\n  }\n  @call({})\n  endGame({ gameId, challenge_data, new_score, ticket_reward }: { gameId: string, challenge_data: {name: string, value: number}[], new_score: number, ticket_reward: number}) {\n    const playerId = near.predecessorAccountId();\n    const playKey = `${gameId}-${playerId}`;\n    assert(this.plays.containsKey(playKey), \"Player has not played this game\")\n    assert(this.games.get(gameId), \"Game does not exist\")\n        // need to assert that the game creator is the account that called this function\n    // then update player progress on challenges\n    const stats = this.playerStats.get(playerId)?.find(stat => stat.game_id === gameId)\n    if (stats) {\n      near.log(stats);\n      for (const data of challenge_data) {\n        const challenge = stats.challengeData.find((value) => value.name === data.name);\n        if (challenge !== undefined) {\n          challenge.value += data.value\n        } else {\n          stats.challengeData.push(data);\n        }\n      }\n      stats.score += new_score;\n      this.playerStats.set(playerId, this.playerStats.get(playerId).map(stat => stat.game_id === gameId ? stats : stat));\n      near.log(stats);\n    } else {\n      const newStat = new Stat({player_id: playerId, game_id: gameId});\n      newStat.score = new_score;\n      newStat.challengeData = challenge_data;\n      const currentStats = this.playerStats.get(playerId) || [];\n      currentStats.push(newStat);\n      this.playerStats.set(playerId, currentStats)\n    }\n    // now update tickets\n    const currentGameTickets = this.ticketBalances.get(gameId) || 0;\n    if (currentGameTickets > ticket_reward) {\n      this.ticketBalances.set(gameId, currentGameTickets - ticket_reward);\n      this.ticketBalances.set(playerId, (this.ticketBalances.get(playerId) || 0) + ticket_reward);\n      this.ticketLeaderboard.set(playerId, (this.ticketLeaderboard.get(playerId) || 0) + ticket_reward);\n    } else {\n      near.log(\"Not enough tickets in game account\")\n    }\n  }\n  @view({})\n  getMyTickets({player_id}: {player_id: string}): number {\n    return this.ticketBalances.get(player_id) || 0;\n  }\n  @view({})\n  getGames(): Game[] {\n    return this.games.toArray().map(data => data[1])\n  }\n  @view({})\n  getMyGames({account_id}: {account_id: string}): Game[] {\n    return this.games.toArray().filter(data => data[1].admin === account_id).map(data => data[1])\n  }\n  @view({})\n  getChallengesForGame({ gameName }: { gameName: string }) {\n    return this.games.get(gameName)?.challenges || []\n  }\n  @view({})\n  getGame({name}: {name: string}): Game {\n    return this.games.get(name);\n  }\n  @view({})\n  getStat({game_id, player_id}: {game_id: string, player_id: string}): Stat {\n    return this.playerStats.get(player_id)?.find(stat => stat.game_id === game_id);\n  }\n  @view({})\n  getStatsForPlayer({player_id}: {player_id: string}) {\n    return this.playerStats.get(player_id) || [];\n  }\n  @view({})\n  getGameLeaderboard({game_id}: {game_id: string}) {\n    return this.playerStats.toArray().map(data => data[1]).reduce((prev, curr) => {\n      prev.push(...curr);\n      return prev;\n    }, []).filter(stat => stat.game_id === game_id).sort((a, b) => b.score - a.score);\n  }\n  @view({})\n  getGamesPlayed({player_id}: {player_id: string}) {\n    return this.playerStats.get(player_id) || [];\n  }\n  @view({})\n  getPlaying({gameId, playerId}: {gameId: string, playerId: string}) {\n    return this.plays.get(`${gameId}-${playerId}`) ? true : false;\n  }\n  @view({})\n  getPlays() {\n    return this.plays\n  }\n  @view({})\n  getTicketLeaderboard() {\n    return this.ticketLeaderboard.toArray().map(data => data[1]).sort((a, b) => b - a).splice(0, 10);\n  }\n  @view({})\n  getMyPhysicalPrizes({player_id}: {player_id: string}) {\n    return this.physicalPrizes.toArray().map(data => data[1]).filter(prize => prize.player_id === player_id);\n  }\n  @call({})\n  claimLeaderboardReward({player_id, game_id}: {player_id: string, game_id: string}) {\n    const game = this.games.get(game_id);\n    assert(game, \"Game does not exist\");\n    const leaderboard = this.getGameLeaderboard({game_id});\n    let playerIndex = -1\n    for (let i = 0; i < leaderboard.length; i++) {\n      if (leaderboard[i].player_id === player_id) {\n        playerIndex = i;\n        break;\n      }\n    }\n    if (playerIndex !== -1 && playerIndex < game.leaderboardRewards.length) {\n      const currentGameTickets = this.ticketBalances.get(game.name) || 0;\n      const ticket_reward = game.leaderboardRewards[playerIndex];\n      if (currentGameTickets > ticket_reward) {\n        this.ticketBalances.set(game.name, currentGameTickets - ticket_reward);\n        this.ticketBalances.set(player_id, (this.ticketBalances.get(player_id) || 0) + ticket_reward);\n        this.ticketLeaderboard.set(player_id, (this.ticketLeaderboard.get(player_id) || 0) + ticket_reward);\n      }\n    }\n  } \n  @call({})\n  claimChallengeReward({player_id, game_id}: {player_id: string, game_id: string}) {\n    const game = this.games.get(game_id);\n    assert(game, \"Game does not exist\");\n    const stat = this.getStat({player_id, game_id});\n    assert(stat, \"Stat does not exist\");\n    const gameStat = this.getStat({player_id, game_id});\n    assert(gameStat, \"Game stat does not exist\");\n    let totalTickets = 0;\n    for (const challenge of gameStat.challengeData) {\n      const metadata = game.challenges.find(data => data.name === challenge.name);\n      if (metadata) {\n        let i = 0;\n        while (i < metadata.thresholds.length && challenge.value > metadata.thresholds[i]) {\n          i++;\n        }\n        const tickets = i < game.challengeRewards.length ? game.challengeRewards[i] : game.challengeRewards[game.challengeRewards.length - 1];\n        totalTickets += tickets;\n      }\n    }\n    const currentGameTickets = this.ticketBalances.get(game.name) || 0;\n    if (currentGameTickets > totalTickets && totalTickets > 0) {\n      this.ticketBalances.set(game.name, currentGameTickets - totalTickets);\n      this.ticketBalances.set(player_id, (this.ticketBalances.get(player_id) || 0) + totalTickets);\n      this.ticketLeaderboard.set(player_id, (this.ticketLeaderboard.get(player_id) || 0) + totalTickets);\n    }\n  }\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","reduce","accumulated","parameter","index","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageHasKeyRaw","storage_has_key","storageHasKey","storageGetEvictedRaw","storageWriteRaw","storage_write","storageRemoveRaw","storage_remove","storageRemove","inputRaw","input","LookupMap","constructor","keyPrefix","containsKey","storageKey","near","get","remove","set","newValue","storageValue","extend","keyValuePairs","reconstruct","data","indexToKey","prefix","Uint32Array","array","Uint8Array","buffer","Vector","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","done","UnorderedMap","_keys","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","map","start","limit","ret","i","unorderedMap","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","args","apply","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","Play","player","gameId","Stat","player_id","game_id","score","challengeData","Game","admin","url","name","challenges","description","img_url","cost_to_play","leaderboardRewards","challengeRewards","shop","GameChallengeMetadata","metadata","thresholds","Listing","id","seller","price","type","contract_id","img_src","PhysicalPrize","tracking_num","ticket_reward","Arcade","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_dec25","_dec26","_dec27","_dec28","_dec29","_dec30","_dec31","_dec32","_class","_class2","games","plays","ticketBalances","listings","playerStats","ticketLeaderboard","physicalPrizes","init","takeDownListing","claimPhysicalPrizeTicketReward","prize","updatePhysicalPrizeTrackingInfo","createListing","listing","buyListing","buyerTickets","physicalPrize","getListings","getMyListings","account_id","filter","buyFromGameShop","game","find","addToGameShop","removeFromGameShop","getGameShop","createGame","challengeMap","challenge","fundGame","amount","currentGameBalance","playGame","playerId","play","endGame","challenge_data","new_score","playKey","stats","stat","newStat","currentStats","currentGameTickets","getMyTickets","getGames","getMyGames","getChallengesForGame","gameName","getGame","getStat","getStatsForPlayer","getGameLeaderboard","prev","curr","sort","b","getGamesPlayed","getPlaying","getPlays","getTicketLeaderboard","splice","getMyPhysicalPrizes","claimLeaderboardReward","leaderboard","playerIndex","claimChallengeReward","gameStat","totalTickets","tickets","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","onReturn","value_return"],"mappings":"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"}